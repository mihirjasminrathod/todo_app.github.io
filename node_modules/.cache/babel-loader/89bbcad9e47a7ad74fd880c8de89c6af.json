{"ast":null,"code":"import _slicedToArray from\"/Users/mihirjasminrathod/todo_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import Todo from'./Todo';import{Button,FormControl,Input,InputLabel}from'@material-ui/core';import'./App.css';import db from'./firebase';import firebase from'firebase';function App(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),todos=_useState2[0],setTodos=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),input=_useState4[0],setInput=_useState4[1];//when the app loads, we need to listen to the database and fetch new todos as they get added/deleted\nuseEffect(function(){//this code here... fires when the app.js loads\ndb.collection('todos').orderBy('timestamp','desc').onSnapshot(function(snapshot){// console.log(snapshot.docs.map(doc => doc.data()));\nsetTodos(snapshot.docs.map(function(doc){return doc.data().todo;}));});},[]);var addTodo=function addTodo(event){//this will fire off when we click the button\nevent.preventDefault();//this will prevent from refreshing\ndb.collection('todos').add({todo:input,timestamp:firebase.firestore.FieldValue.serverTimestamp()});setInput('');//clear up the input after clicking add todo button\n};return/*#__PURE__*/React.createElement(\"div\",{className:\"App\"},/*#__PURE__*/React.createElement(\"h1\",null,\" Hello world \\u2764\\uFE0F \"),/*#__PURE__*/React.createElement(\"form\",null,/*#__PURE__*/React.createElement(FormControl,null,/*#__PURE__*/React.createElement(InputLabel,null,\" \\u2705Write a Todo\"),/*#__PURE__*/React.createElement(Input,{value:input,onChange:function onChange(event){return setInput(event.target.value);}})),/*#__PURE__*/React.createElement(Button,{disabled:!input,type:\"submit\",onClick:addTodo,variant:\"contained\",color:\"primary\"},\"Add ToDo\")),/*#__PURE__*/React.createElement(\"ul\",null,todos.map(function(todo){return/*#__PURE__*/React.createElement(Todo,{text:todo})// <li>{todo}</li>\n;})));}export default App;","map":{"version":3,"sources":["/Users/mihirjasminrathod/todo_app/src/App.js"],"names":["React","useState","useEffect","Todo","Button","FormControl","Input","InputLabel","db","firebase","App","todos","setTodos","input","setInput","collection","orderBy","onSnapshot","snapshot","docs","map","doc","data","todo","addTodo","event","preventDefault","add","timestamp","firestore","FieldValue","serverTimestamp","target","value"],"mappings":"wJAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CACA,OAASC,MAAT,CAAiBC,WAAjB,CAA8BC,KAA9B,CAAqCC,UAArC,KAAuD,mBAAvD,CACA,MAAO,WAAP,CACA,MAAOC,CAAAA,EAAP,KAAe,YAAf,CACA,MAAOC,CAAAA,QAAP,KAAqB,UAArB,CAEA,QAASC,CAAAA,GAAT,EAAe,eACaT,QAAQ,CAAC,EAAD,CADrB,wCACNU,KADM,eACCC,QADD,8BAEaX,QAAQ,CAAC,EAAD,CAFrB,yCAENY,KAFM,eAECC,QAFD,eAIb;AACFZ,SAAS,CAAC,UAAM,CACd;AACAM,EAAE,CAACO,UAAH,CAAc,OAAd,EAAuBC,OAAvB,CAA+B,WAA/B,CAA4C,MAA5C,EAAoDC,UAApD,CAA+D,SAAAC,QAAQ,CAAI,CACzE;AACAN,QAAQ,CAACM,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAkB,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,IAAJ,GAAWC,IAAf,EAArB,CAAD,CAAR,CACD,CAHD,EAID,CANQ,CAMN,EANM,CAAT,CASE,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,CAAW,CACzB;AACAA,KAAK,CAACC,cAAN,GAAwB;AAExBlB,EAAE,CAACO,UAAH,CAAc,OAAd,EAAuBY,GAAvB,CAA2B,CACzBJ,IAAI,CAAEV,KADmB,CAEzBe,SAAS,CAAEnB,QAAQ,CAACoB,SAAT,CAAmBC,UAAnB,CAA8BC,eAA9B,EAFc,CAA3B,EAMAjB,QAAQ,CAAC,EAAD,CAAR,CAAc;AACf,CAXD,CAaA,mBACE,2BAAK,SAAS,CAAC,KAAf,eACE,2DADF,cAEE,6CAGA,oBAAC,WAAD,mBACE,oBAAC,UAAD,4BADF,cAEE,oBAAC,KAAD,EAAO,KAAK,CAAED,KAAd,CAAqB,QAAQ,CAAE,kBAAAY,KAAK,QAAIX,CAAAA,QAAQ,CAACW,KAAK,CAACO,MAAN,CAAaC,KAAd,CAAZ,EAApC,EAFF,CAHA,cAQA,oBAAC,MAAD,EAAQ,QAAQ,CAAE,CAACpB,KAAnB,CAA0B,IAAI,CAAC,QAA/B,CAAwC,OAAO,CAAEW,OAAjD,CAA0D,OAAO,CAAC,WAAlE,CAA8E,KAAK,CAAC,SAApF,aARA,CAFF,cAgBE,8BACGb,KAAK,CAACS,GAAN,CAAU,SAAAG,IAAI,qBACb,oBAAC,IAAD,EAAM,IAAI,CAAEA,IAAZ,EACA;AAFa,EAAd,CADH,CAhBF,CADF,CAyBD,CAED,cAAeb,CAAAA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Todo from './Todo';\nimport { Button, FormControl, Input, InputLabel } from '@material-ui/core';\nimport './App.css';\nimport db from './firebase';\nimport firebase from 'firebase';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState('');\n\n  //when the app loads, we need to listen to the database and fetch new todos as they get added/deleted\nuseEffect(() => {\n  //this code here... fires when the app.js loads\n  db.collection('todos').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n    // console.log(snapshot.docs.map(doc => doc.data()));\n    setTodos(snapshot.docs.map(doc => doc.data().todo))\n  })\n}, []);\n\n\n  const addTodo = (event) => {\n    //this will fire off when we click the button\n    event.preventDefault(); //this will prevent from refreshing\n    \n    db.collection('todos').add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n\n  \n    setInput(''); //clear up the input after clicking add todo button\n  }\n  \n  return (\n    <div className=\"App\">\n      <h1> Hello world ❤️ </h1>\n      <form>\n      {/* <input value={input} onChange={event => setInput(event.target.value)}/> */}\n      \n      <FormControl>\n        <InputLabel> ✅Write a Todo</InputLabel>\n        <Input value={input} onChange={event => setInput(event.target.value)}/>\n      </FormControl>\n      \n      <Button disabled={!input} type=\"submit\" onClick={addTodo} variant=\"contained\" color=\"primary\">\n        Add ToDo\n      </Button>\n      {/* <button type=\"submit\" onClick={addTodo}> Add Todo </button> */}\n      </form>\n      \n      <ul>\n        {todos.map(todo => (\n          <Todo text={todo}/>\n          // <li>{todo}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}